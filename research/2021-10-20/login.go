package main

import (
   "bufio"
   "encoding/hex"
   "github.com/refraction-networking/utls"
   "net"
   "net/http"
   "net/url"
   "net/http/httputil"
   "os"
   "strings"
)

const (
   androidChrome = "16030100d6010000d20303a520af6875fb7e0b50239e9291f6f7fcebfa16ab608320eeaacb0590ed66fb3200001c1a1acca9cca8c02bc02fc02cc030c013c014009c009d002f0035000a0100008ddada0000ff010001000000001d001b000018636c69656e742e746c7366696e6765727072696e742e696f0017000000230000000d00140012040308040401050308050501080606010201000500050100000000001200000010000e000c02683208687474702f312e3175500000000b00020100000a000a00087a7a001d00170018001b0003020002caca000100"
   androidWebview = "16030100d2010000ce0303daefaf0cabffb67dbbfd30ec91d82d4d1687d5e90e1640a0f0c9fed04275dfb200001ccacacca9cca8c02bc02fc02cc030c013c014009c009d002f0035000a010000891a1a0000ff010001000000001d001b000018636c69656e742e746c7366696e6765727072696e742e696f0017000000230000000d00140012040308040401050308050501080606010201000500050100000000001200000010000e000c02683208687474702f312e31000b00020100000a000a00081a1a001d00170018001b00030200020a0a000100"
   curl = "1603010200010001fc03037393ec766214295effde887ad7d5170fc7078c722c1c70e36ad042110ec6545420a487bd46a715cae62c4e74dcaa7c894ca2d407c3acfca34cacdeb401904a3b9e003e130213031301c02cc030009fcca9cca8ccaac02bc02f009ec024c028006bc023c0270067c00ac0140039c009c0130033009d009c003d003c0035002f00ff010001750000001d001b000018636c69656e742e746c7366696e6765727072696e742e696f000b000403000102000a000c000a001d0017001e00190018337400000010000e000c02683208687474702f312e31001600000017000000310000000d0030002e040305030603080708080809080a080b080408050806040105010601030302030301020103020202040205020602002b0009080304030303020301002d00020101003300260024001d0020a213a52a100dd80f635e685b22e0b284064f17b5c05d9f5dd4c21bea36e34c00001500a5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
   firefox = "16030101fc010001f803037a746304c5306ac31f73b40f6bc5c7a358755421e97778241081d3086a841aad20d448abaf74a40ed1f063172691561dc0188de102eb62dafe0e8f626ad458721f0024130113031302c02bc02fcca9cca8c02cc030c00ac009c013c014009c009d002f0035000a0100018b0000001d001b000018636c69656e742e746c7366696e6765727072696e742e696f00170000ff01000100000a000e000c001d00170018001901000101000b00020100002300000010000e000c02683208687474702f312e310005000501000000000033006b0069001d002019241a5129054181978fb8c10a90f0a1ce7f77eff71d66688339c985182a54710017004104edbd4e6fe01de365be0b1f5d79b4328d7d6ccde4e31a8c68e24c428708c2a908ce065a1a059ce897ee353285063f165a2b7af61540357cd8bd5fed6f850ffc1f002b00050403040303000d0018001604030503060308040805080604010501060102030201002d00020101001c00024001001500860000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
   java = "16030301a5010001a10303038e4a2d8822a5779e64108425df9c58cac011f6c92b71604b1de26f2cffdfdf2037c914f2bfac87bc24a97aeaaf2ef0869cc20d258eb464738bcfb08b1fdf7ece005a13011302c02cc02bc030009dc02ec032009f00a3c02f009cc02dc031009e00a2c024c028003dc026c02a006b006ac00ac0140035c005c00f00390038c023c027003cc025c02900670040c009c013002fc004c00e0033003200ff010000fe0000001d001b000018636c69656e742e746c7366696e6765727072696e742e696f000500050100000000000a00160014001d001700180019001e01000101010201030104000b00020100000d002800260403050306030804080508060809080a080b04010501060104020303030103020203020102020032002800260403050306030804080508060809080a080b04010501060104020303030103020203020102020010000e000c02683208687474702f312e310011000900070200040000000000170000002b00050403040303002d00020101003300260024001d0020d2990363caac913b9840c7d60d562bacd6ac48f65151b71b43b15fbeb7635e5d"
   pass = "160301012b010001270303a0339d6e5227c7ae5d9aeeedd0ddbc9a4bc4242b8637d4102f2b03431d34c672203c5dbb1b475a437f87d8a90cc8ead98b03a655673bd6681b37f4ef530d52ec3e0056130213031301c02cc030c02bc02fcca9cca8009f009eccaac0afc0adc0aec0acc024c028c023c027c00ac014c009c013c0a3c09fc0a2c09e006b006700390033009d009cc0a1c09dc0a0c09c003d003c0035002f00ff010000880000001d001b000018636c69656e742e746c7366696e6765727072696e742e696f000b000403000102000a000c000a001d0017001e00190018002300000016000000170000000d00080006040304010804002b0003020303002d00020101003300260024001d0020fc335179425ee7f4d8827281f32bdd973f9c28fb78505c9b8514486469dce80a"
)

func main() {
   val := url.Values{
      "Email": {"srpen6@gmail.com"},
      "sdk_version": {"17"},
      "EncryptedPasswd": {encryptedPasswd},
   }
   req, err := http.NewRequest(
      "POST", "https://android.clients.google.com/auth",
      strings.NewReader(val.Encode()),
   )
   if err != nil {
      panic(err)
   }
   req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
   tcpConn, err := net.Dial("tcp", req.URL.Host + ":" + req.URL.Scheme)
   if err != nil {
      panic(err)
   }
   config := &tls.Config{ServerName: req.URL.Host}
   tlsConn := tls.UClient(tcpConn, config, tls.HelloCustom)
   data, err := hex.DecodeString(pass)
   if err != nil {
      panic(err)
   }
   fp := tls.Fingerprinter{AllowBluntMimicry: true}
   spec, err := fp.FingerprintClientHello(data)
   if err != nil {
      panic(err)
   }
   var exts []tls.TLSExtension
   for _, ext := range spec.Extensions {
      switch v := ext.(type) {
      case *tls.ALPNExtension:
         exts = append(exts, &tls.ALPNExtension{
            []string{"http/1.1"},
         })
      case *tls.GenericExtension:
         if v.Id != 0x7550 {
            exts = append(exts, ext)
         }
      default:
         exts = append(exts, ext)
      }
   }
   spec.Extensions = exts
   if err := tlsConn.ApplyPreset(spec); err != nil {
      panic(err)
   }
   if err := req.Write(tlsConn); err != nil {
      panic(err)
   }
   res, err := http.ReadResponse(bufio.NewReader(tlsConn), req)
   if err != nil {
      panic(err)
   }
   defer res.Body.Close()
   dRes, err := httputil.DumpResponse(res, true)
   if err != nil {
      panic(err)
   }
   os.Stdout.Write(dRes)
}
