package crypto

import (
   "encoding/hex"
   "fmt"
   "os"
   "testing"
)

var cURL = []byte{0x16, 0x3, 0x1, 0x2, 0x0, 0x1, 0x0, 0x1, 0xfc, 0x3, 0x3,
0x33, 0x56, 0xee, 0x9, 0x9c, 0x0, 0x62, 0x13, 0xec, 0xb9, 0xf7, 0x49, 0x3e,
0xf9, 0x81, 0xdd, 0x51, 0x37, 0x61, 0xea, 0xe2, 0x7e, 0xff, 0x36, 0xa1, 0x77,
0xeb, 0xd3, 0x53, 0xfc, 0x20, 0x75, 0x20, 0xfa, 0x9e, 0xf5, 0x38, 0x71, 0xb8,
0x1a, 0xf0, 0x22, 0xe3, 0x8d, 0x46, 0xca, 0x92, 0x68, 0xbe, 0x95, 0x88, 0x9d,
0x6e, 0x96, 0x4d, 0xb8, 0x18, 0x76, 0x8e, 0xc8, 0x6a, 0x68, 0xc7, 0x21, 0x6f,
0x0, 0x3e, 0x13, 0x2, 0x13, 0x3, 0x13, 0x1, 0xc0, 0x2c, 0xc0, 0x30, 0x0, 0x9f,
0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa, 0xc0, 0x2b, 0xc0, 0x2f, 0x0, 0x9e, 0xc0,
0x24, 0xc0, 0x28, 0x0, 0x6b, 0xc0, 0x23, 0xc0, 0x27, 0x0, 0x67, 0xc0, 0xa,
0xc0, 0x14, 0x0, 0x39, 0xc0, 0x9, 0xc0, 0x13, 0x0, 0x33, 0x0, 0x9d, 0x0, 0x9c,
0x0, 0x3d, 0x0, 0x3c, 0x0, 0x35, 0x0, 0x2f, 0x0, 0xff, 0x1, 0x0, 0x1, 0x75,
0x0, 0x0, 0x0, 0x10, 0x0, 0xe, 0x0, 0x0, 0xb, 0x65, 0x78, 0x61, 0x6d, 0x70,
0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x0, 0xb, 0x0, 0x4, 0x3, 0x0, 0x1, 0x2,
0x0, 0xa, 0x0, 0xc, 0x0, 0xa, 0x0, 0x1d, 0x0, 0x17, 0x0, 0x1e, 0x0, 0x19, 0x0,
0x18, 0x33, 0x74, 0x0, 0x0, 0x0, 0x10, 0x0, 0xe, 0x0, 0xc, 0x2, 0x68, 0x32,
0x8, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x0, 0x16, 0x0, 0x0, 0x0,
0x17, 0x0, 0x0, 0x0, 0x31, 0x0, 0x0, 0x0, 0xd, 0x0, 0x30, 0x0, 0x2e, 0x4, 0x3,
0x5, 0x3, 0x6, 0x3, 0x8, 0x7, 0x8, 0x8, 0x8, 0x9, 0x8, 0xa, 0x8, 0xb, 0x8, 0x4,
0x8, 0x5, 0x8, 0x6, 0x4, 0x1, 0x5, 0x1, 0x6, 0x1, 0x3, 0x3, 0x2, 0x3, 0x3, 0x1,
0x2, 0x1, 0x3, 0x2, 0x2, 0x2, 0x4, 0x2, 0x5, 0x2, 0x6, 0x2, 0x0, 0x2b, 0x0,
0x9, 0x8, 0x3, 0x4, 0x3, 0x3, 0x3, 0x2, 0x3, 0x1, 0x0, 0x2d, 0x0, 0x2, 0x1,
0x1, 0x0, 0x33, 0x0, 0x26, 0x0, 0x24, 0x0, 0x1d, 0x0, 0x20, 0x34, 0x10, 0x7e,
0x2f, 0xb6, 0x1c, 0xbf, 0xc3, 0xc8, 0x27, 0xb3, 0xd5, 0x74, 0xb5, 0x7d, 0x9d,
0x5f, 0x52, 0x94, 0xbe, 0xdb, 0x7e, 0xe3, 0x50, 0x40, 0x7c, 0x5, 0xd1, 0xa9,
0x39, 0x6b, 0x5b, 0x0, 0x15, 0x0, 0xb2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

const androidHandshake =
   "16030100bb010000b703034420d198e7852decbc117dc7f90550b98f2d643c954bf3361d" +
   "daf127ff921b04000024c02bc02ccca9c02fc030cca8009e009fc009c00ac013c0140033" +
   "0039009c009d002f00350100006aff0100010000000022002000001d636c69656e747365" +
   "7276696365732e676f6f676c65617069732e636f6d0017000000230000000d0016001406" +
   "010603050105030401040303010303020102030010000b000908687474702f312e31000b" +
   "00020100000a000400020017"

const androidJA3 =
   "769,49195-49196-52393-49199-49200-52392-158-159-49161-49162-49171-49172-" +
   "51-57-156-157-47-53,65281-0-23-35-13-16-11-10,23,0"

func TestHandshake(t *testing.T) {
   data, err := hex.DecodeString(androidHandshake)
   if err != nil {
      t.Fatal(err)
   }
   hello, err := ParseHandshake(data)
   if err != nil {
      t.Fatal(err)
   }
   fmt.Printf("%+v\n", hello)
}

func TestHandshakes(t *testing.T) {
   pcap, err := os.ReadFile("PCAPdroid_25_Oct_21_53_41.pcap")
   if err != nil {
      t.Fatal(err)
   }
   for _, hand := range Handshakes(pcap) {
      hello, err := ParseHandshake(hand)
      if err == nil {
         fmt.Printf("%+v\n", hello)
      }
   }
}

func TestJA3(t *testing.T) {
   h, err := ParseJA3(androidJA3)
   if err != nil {
      t.Fatal(err)
   }
   for _, ext := range h.ClientHelloSpec.Extensions {
      fmt.Printf("%#v\n", ext)
   }
   j, err := h.FormatJA3()
   if err != nil {
      t.Fatal(err)
   }
   if j != androidJA3 {
      t.Fatal(j)
   }
}
